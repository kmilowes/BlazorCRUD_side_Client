@page "/Indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS
<h1>Personas</h1>

<div>
    <a class="btn btn-success" href="Create-Person">New</a>
</div>
@if (people == null)
{
    <text>Loading...</text>
}
else if (people.Length == 0)
{
    <text>No hay personas en la BD...</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Nombre</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var person in people)
            {
                <tr>
                    <td>
                        <a href="/EditPerson/@person.Id" class="btn btn-success">Edit</a>
                        <button class="btn btn-danger" @onclick="@(()=> DeletePerson(person.Id))">Delete</button>
                    </td>
                    <td>
                        @person.Id
                    </td>
                    <td>
                        @person.Name
                    </td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    Person[] people { get; set; }
    //Para inicializar el componente
    protected override async Task OnInitializedAsync()
    {
        await CargarPersonas();
    }

    async Task CargarPersonas()
    {
        people = await Http.GetFromJsonAsync<Person[]>("api/People");//People-->Controlador creado en el WebAPI
        //people = new Person[] {
        //new Person(){Id=1,Name="Felipe" },
        //new Person(){Id=2,Name="Claudia" },

        //};
    }

    async Task DeletePerson(int IdPersona)
    {
        var personSelected = people.First(x => x.Id == IdPersona);
        string messageConfirm = $"¿ Deseas borrar la persona {personSelected.Name} ?";
        if (await JS.InvokeAsync<bool>("confirm", messageConfirm))
        {
            await Http.DeleteAsync($"api/People/{IdPersona}");
            await CargarPersonas();
        }
    }

}
